#! /usr/bin/env bash

shopt -s extglob
set -o errtrace
#set -o errexit
set +o noclobber

repo="https://github.com/michmich112/Configuration-Files.git"
SOURCE="$HOME/.cache/repo"

repositories=( 'homebrew/completion' 'homebrew/binary' 'caskroom/cask' 'homebrew/versions' 'caskroom/versions' )
packages=( jq bar p7zip bash-completion zsh wget tmux vim nmap npm nodejs )
casks=()

#installation for OSX
function verbose # {{{2
{
  echo $@
} # }}}2

function install_manager() # {{{2
{
  local status=0

  if which brew > /dev/null 2>&1; then
    brew update
    status=$? && [[ $status != 0 ]] && return $status
    brew upgrade
    status=$? && [[ $status != 0 ]] && return $status
  else
    verbose "Installing Homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    status=$? && [[ $status != 0 ]] && return $status
    # we really cannot live without this one:
    brew install jq
  fi
  return $status
} # }}}2

function install_repository() # {{{2
{
  local name=$1
  local status=0

  if [[ -z $(brew tap | grep "$name") ]]; then
    verbose "Adding repository $name"
    brew tap $name
    status=$? && [[ $status != 0 ]] && return $status
  else
    verbose "Repository $name is already installed"
  fi
  return $status
} # }}}2

function install_package() # {{{2
{
  local name=$1
  local status=0
  local version
  local info=$(brew info --json=v1 --installed | jq --raw-output --compact-output "map(collect(.name == \"$name\"))[0]")

  if [[ "$info" == "null" ]]; then
    verbose "Installing $name"
    $NOOP brew install --appdir=/Applications $name
    status=$? && [[ $status != 0 ]] && return $status
  else
    version=$(echo "$info" | jq --raw-output '.installed[0] | .version')
    verbose "Package $name is already installed (version $version"
  fi
  return $status
} # }}}2

function setup-zsh() # {{{2
{
  # install oh-my-zsh
  sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
} # }}}2

function setup_git() # {{{2
{
  git config --global color.ui auto
} # }}}2

function setup_tmux() # {{{2
{
  # TODO: Check if target exists and if it is older than source!
  cp $SOURCE/tmux.conf $HOME/.tmux.conf
} # }}}2

function setup_vim() # {{{2
{
  # TODO: Check if target exists and if it is older than source!
  cp $SOURCE/vimrc $HOME/.vimrc
} # }}}2

function main() # {{{2
{
  install_manager

  for repository in ${repositories[*]}; do
    install_repository $repository
    status=$? && [[ $status != 0 ]] && echo "Failed installing repository $repository" && return $status
  done

  for package in ${packages[*]}; do
    install_package $package
    status=$? && [[ $status != 0 ]] && echo "Failed installing package $package" && return $status
  done

  [[ -d $HOME/.cache ]] || mkdir -p $HOME/.cache
  if [[ -d $SOURCE ]]; then
    git -C "$SOURCE" pull
  else
    $NOOP git clone $repo "$SOURCE"
    status=$? && [[ $status != 0 ]] && return $status
  fi

  setup_zsh
  setup_git
  setup_tmux
  setup_vim
} # }}}2

main $@
#vim: ts=2:syntax=sh:foldmethod=marker
